#!/usr/bin/env perl
use strict;
use warnings;
use lib::xi;
use File::Path;
use Version::Next;
use autodie ':all';
use Pod::Usage;

App::mvnutils->new->run;

package App::mvnutils {
    use Path::Tiny;
    use ExtUtils::MakeMaker qw(prompt);
    use File::pushd;
    use Text::Markdown::Hoedown;
    use Text::MicroTemplate qw(render_mt encoded_string);
    use File::Zglob;
    use XML::Simple qw(XMLin);

    sub new {
        my $class = shift;

        my $self = bless {
            workdir => "$ENV{HOME}/.mvn-release/",
        }, $class;
        return $self;
    }

    sub run {
        my $self = shift;
        $self->init;
        my @argv = @ARGV;
        my $cmd = shift @argv || 'help';
        my $meth = "CMD_${cmd}";
        $self->$meth(@argv);
    }

    sub CMD_docs {
        my $self = shift;
        $self->render_index_html();
    }

    sub CMD_help {
        my $self = shift;
        Pod::Usage::pod2usage();
    }

    sub CMD_release {
        my $self = shift;

        my $workdir = $self->{workdir};

        # bump up version
        my $curver = get_version();
        print "Current version is: $curver. Next? \n";

        my $nextver = prompt("Next Release?", default_new_version($curver));
        $nextver =~ /\S/ or die;

        rewrite_version($nextver);

        # ------------------------------------------------------------------------- 
        # build

        system("mvn", "-DaltDeploymentRepository=release-repo::default::file:$workdir/releases/",
            'clean', 'deploy');

        system("git", 'tag', $nextver);
        system("git push --tags");

        {
            my $pushd = pushd($workdir);
            system("git add .");
            system('git', 'commit', '-m', $nextver);
            $self->render_index_html();
            system("git push origin gh-pages");
        }

        rewrite_version(Version::Next::next_version($nextver) . '-SNAPSHOT');

        exit 0;
    }

    sub render_index_html {
        my $self = shift;
        my $pushd = pushd($self->{workdir});
        my $readme_md = path('README.md')->slurp;
        my $md_html = markdown($readme_md);
        my @modules = $self->list_modules;
        my $html = render_mt(path('_tmpl/index.html')->slurp(), encoded_string($md_html), \@modules);
        path('index.html')->spew($html);
    }

    sub init {
        my $self = shift;
        unless (-d $self->{workdir}) {
            die "Missing $self->{workdir}\n";
        }

        unless (-f 'pom.xml') {
            die "There is no pom.xml in current directory";
        }
    }


    sub rewrite_version {
        my $nextver = shift;

        my $pom = path('pom.xml')->slurp;
        $pom =~ s!(<version>).*?(</version>)!$1$nextver$2!;
        path('pom.xml')->spew($pom);
    }

    sub default_new_version {
        my $ver = shift;
        $ver =~ s/-SNAPSHOT$//;
        if (exists_tag($ver)) {
            return Version::Next::next_version($ver);
        } else {
            return $ver;
        }
    }

    sub get_version {
        my ($curver) = (path('pom.xml')->slurp =~ '<version>(\d+\.\d+\.\d+(?:-SNAPSHOT)?)</version>');
        return $curver;
    }

    sub exists_tag {
        my ( $tag ) = @_;

        my $x       = `git tag -l $tag`;
        chomp $x;
        return !!$x;
    }

    sub list_modules {
        my $self = shift;
        my $workdir = $self->{workdir};
        my @ret;
        for my $meta (zglob("$workdir/releases/**/maven-metadata.xml")) {
            my $xml = XMLin(path($meta)->slurp);

#       {
#         'groupId' => 'me.geso',
#         'versioning' => {
#                         'lastUpdated' => '20140711085933',
#                         'versions' => {
#                                       'version' => [
#                                                    '0.0.4',
#                                                    '0.0.5',
#                                                    '0.0.6'
#                                                  ]
#                                     }
#                       },
#         'version' => '0.0.4',
#         'artifactId' => 'dbinspector'
#       }
            # use Data::Dumper; warn Dumper($xml);
        my $version = $xml->{versioning}{versions}{version};
            for my $version (ref($version) ? @$version : $version) {
                my $versiondir = path($meta)->parent()->child($version);
                my ($pom) = glob("$versiondir/*.pom");
                $pom or die "Missing pom file in $versiondir/";
                my $versionxml = XMLin(path($pom)->slurp);
                unshift @{$xml->{versions}}, $versionxml;
                if ($xml->{version} eq $version) {
                    $xml->{description} = $versionxml->{description} or die;
                }
            }
            push @ret, $xml;
        }
        return @ret;
    }
}

__END__

=head1 NAME

mvnutil - tiny utility command for Apache maven.

=head1 SYNOPSIS

    % mvnutil release
    % mvnutil docs
    % mvnutil help

=head1 DESCRIPTION

Apache maven is really awesome framework for managging dependencies. But it's really painful when I release the libraries on maven central repository. I want to release it on the github pages.

This command help to manage maven repo on gh-pages!

=head1 INSTALLATION

    curl -L http://cpanmin.us/ | perl - -nv git://github.com/tokuhirom/mvnutil.git

=head1 PREPARATION

You need to clone your maven repository in ~/.mvn-release/ directory before working.

    git clone git@github.com:tokuhirom/maven.git ~/.mvn-release/
    git checkout gh-pages

If you don't have a repository to work, run the following commands

    mkdir -p ~/.mvn-release/
    cd ~/.mvn-release/
    git init
    touch README.md
    git remote add origin git@github.com:your/repository.git
    git checkout -b gh-pages
    git push -u origin gh-pages

